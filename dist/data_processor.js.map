{"version":3,"sources":["../src/data_processor.js"],"names":["getCategories","data","categories","reduce","arr","d","category","undefined","push","Array","from","Set","restructuredData","rowCols","rows","cols","c","col","text","toLowerCase","i","length","row","serise","k","getSunburstData","cate","filter","findDistinct","root","totalDuration","calcDuration","toHrsAndMins","console","log","obj","name","children","value","getCategoryFrequency","info","type","parent","duration","getParentReasons","reasonsCounts","countReasons","p_reasons","parentreason","p_reason","calcDurationForReason","reason","addSubReasons","node","allReasons","real_index","sub_reasons","reasons","split","index","indexOf","r","durationint","findDisctinctSubReasons","sub_reason","child","reasons_arr","counts","forEach","x","key","record","difference","daysDiff","Math","floor","hrsDiff","minsDiff","secsDiff","timeToAdd","getTotalDuration","dur"],"mappings":"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","file":"data_processor.js","sourcesContent":["\n/**\n * Expecting the restructured datalist\n * Return an array with distinct categories  --> ['category-1', 'category-2', ...]\n * @param {*} data \n */\nexport function getCategories(data) {\n  \n  let categories = data.reduce((arr, d) => {\n    if (d.category !== null && d.category !== undefined) {\n      arr.push(d.category)\n    }\n    return arr\n  }, [])\n  \n  return Array.from(new Set(categories))\n}\n\n/**\n * Expecting columns names, and rows values\n * Return {col-1 : value-1, col-2 : value-2 .....}\n * @param {*} rowCols \n * @param {*} rows \n */\nexport function restructuredData (rowCols, rows) {\n  let data = []\n  let cols = rowCols.reduce((arr, c) => {\n    const col = c.text.toLowerCase()\n    arr.push(col)\n    return arr\n  }, [])\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i]\n    let serise = {}\n    for (let k = 0; k < cols.length; k++) {\n      const col = cols[k]\n      serise[col] = row[k]\n    }\n    data.push(serise)\n  }\n\n  return data\n}\n\nexport function getSunburstData(data){\n\n  const cate = data.filter(d => d.category !== null && d.category !== undefined)\n  const categories = findDistinct(cate, 'categories')\n\n  let root = []\n\n  for (let i = 0; i < categories.length; i++) {\n    const category = categories[i];\n    //calculate the total duration for this category\n    let totalDuration = calcDuration(category, data)\n    totalDuration = toHrsAndMins(totalDuration)\n    console.log(totalDuration);\n\n    let obj = {\n      name: category,\n      children: [],\n      value: getCategoryFrequency(data, category),\n      info: {\n        category: category,\n        type: 'Category',\n        parent: null,\n        duration: totalDuration\n      }\n    }\n    root.push(obj)\n  }\n\n  return getParentReasons(root, data)\n}\n\nfunction getParentReasons(root, data) {\n\n  const reasonsCounts = countReasons(data)\n\n  for (let i = 0; i < root.length; i++) {\n    const category = root[i];\n    //filter parent reaons that are from this category\n    let p_reasons = data.filter(d => d.category === category.name && d.parentreason !== null)\n    //find distinct reasons    \n    p_reasons = findDistinct(p_reasons, 'p_reasons')\n    //for each distinct reason\n    for (let k = 0; k < p_reasons.length; k++) {\n      const p_reason = p_reasons[k];\n\n      let totalDuration = calcDurationForReason(category.name, data, p_reason)\n      totalDuration = toHrsAndMins(totalDuration)\n      console.log(totalDuration);\n      \n      let obj = {\n        name: p_reason,\n        children: [],\n        value: reasonsCounts[p_reason],\n        info: {\n          category: category.name,\n          reason: p_reason,\n          type: 'Reason',\n          parent: category.name,\n          duration: totalDuration\n        }\n      }\n      obj = addSubReasons(obj, category, data, reasonsCounts)\n      root[i].children.push(obj)\n    }\n  }\n\n  return root\n}\n\nfunction addSubReasons(node, category, data, reasonsCounts) {\n  \n  const allReasons = data.filter(d => d.reason !== null & d.reason !== undefined)\n  let real_index\n\n  let sub_reasons = allReasons.filter(d => {\n\n    const reasons = d.reason.split(' | ')\n    let index = reasons.indexOf(node.name)\n    if (index !== -1) {\n      real_index = index\n    }\n    return index !== -1 && index !== reasons.length - 1\n\n  })\n\n  let duration = 0.00\n  for (let i = 0; i < sub_reasons.length; i++) {\n    const r = sub_reasons[i];\n    duration += r.durationint\n  }\n  duration = toHrsAndMins(duration)\n\n  sub_reasons = findDisctinctSubReasons(sub_reasons, real_index)\n  \n  //---------------------------------------------------------------------------------------------------------------------\n  //continue to add duration to sub-reason\n  //---------------------------------------------------------------------------------------------------------------------\n\n  if (sub_reasons.length > 0) {\n    \n    for (let i = 0; i < sub_reasons.length; i++) {\n      let sub_reason = sub_reasons[i];\n\n      let child = {\n        name: sub_reason ,\n        children: [],\n        value: reasonsCounts[sub_reason],\n        info: {\n          category: category.name,\n          reasons: sub_reason,\n          type: 'Sub Reason',\n          parent: node.name,\n          duration: duration\n        }\n      }\n      child = addSubReasons(child, category, data, reasonsCounts)\n      node.children[i] = child\n    }\n  }else {\n\n  }\n\n  return node\n}\n\nfunction countReasons(data){\n\n  const reasons_arr = data.reduce((arr, d) => {\n    if (d.reason) {\n      const reasons = d.reason.split(' | ')\n      for (let i = 0; i < reasons.length; i++) {\n        const reason = reasons[i];\n        arr.push(reason)\n      }\n    }\n    return arr\n  }, [])\n\n  let counts = {}\n  reasons_arr.forEach( x => counts[x] = (counts[x] || 0) + 1)\n\n  return counts\n}\n\nfunction findDistinct(data, key){\n  return Array.from(new Set(data.reduce((arr, record) => {\n    if (key === 'categories') {\n      arr.push(record.category)\n    }else if (key === 'p_reasons') {\n      arr.push(record.parentreason)\n    }\n    return arr\n  }, [])))\n}\n\nfunction getCategoryFrequency(data, category){\n  const categories = data.filter(d => d.category === category)\n  return categories.length\n}\n\nfunction findDisctinctSubReasons(sub_reasons, index){\n  return Array.from(new Set(sub_reasons.reduce((arr, d)=>{\n    const reasons = d.reason.split(' | ')\n    arr.push(reasons[index + 1])\n    return arr\n  }, [])))\n}\n\nfunction calcDuration(category, data) {\n  let duration = 0.00\n  data.forEach((d) => {\n      if (d.category === category) {\n        duration += d.durationint\n      }\n  })\n  return duration\n}\n\nfunction calcDurationForReason(category, data, p_reason) {\n  let duration = 0.00\n  data.forEach(d => {\n    if (d.category === category && d.parentreason === p_reason) {\n      duration += d.durationint\n    }\n  })\n  return duration\n}\n\n/**\n * Expecting a duration int value, return (string) hours and mins like 2:35 meaning 2 hours and 35 mins\n * if val is under 1 hour,  return (string) mins like 55-mins \n * @param {*} val \n */\nfunction toHrsAndMins(difference){  \n  const daysDiff = Math.floor(difference/1000/60/60/24)\n  difference -= daysDiff*1000*60*60*24\n\n  let hrsDiff = Math.floor(difference/1000/60/60)\n  difference -= hrsDiff*1000*60*60\n\n  const minsDiff = Math.floor(difference/1000/60)\n  difference -= minsDiff*1000*60\n\n  const secsDiff = Math.floor(difference/1000)\n  difference -= minsDiff*1000\n\n  let timeToAdd = daysDiff * 24\n  hrsDiff = hrsDiff + timeToAdd\n  \n  if (hrsDiff === 0 && minsDiff === 0) {\n    return secsDiff + ' Seconds'\n  }else if (hrsDiff === 0 && minsDiff !== 0) {\n    return minsDiff + ' Minutes'\n  }\n\n  return hrsDiff + ' Hrs & ' + minsDiff + ' Mins'\n}\n\nexport function getTotalDuration(data){\n  let dur = 0.00\n  for (let i = 0; i < data.length; i++) {\n    const d = data[i];\n    if (d.durationint) {\n      dur += d.durationint\n    }\n  }\n  return toHrsAndMins(dur)\n}"]}